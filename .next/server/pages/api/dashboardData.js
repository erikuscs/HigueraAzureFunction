"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/dashboardData";
exports.ids = ["pages/api/dashboardData"];
exports.modules = {

/***/ "@azure/identity":
/*!**********************************!*\
  !*** external "@azure/identity" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("@azure/identity");

/***/ }),

/***/ "@azure/monitor-query":
/*!***************************************!*\
  !*** external "@azure/monitor-query" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@azure/monitor-query");

/***/ }),

/***/ "applicationinsights":
/*!**************************************!*\
  !*** external "applicationinsights" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("applicationinsights");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "redis":
/*!************************!*\
  !*** external "redis" ***!
  \************************/
/***/ ((module) => {

module.exports = require("redis");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2FdashboardData&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2FdashboardData.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2FdashboardData&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2FdashboardData.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_dashboardData_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/dashboardData.js */ \"(api)/./pages/api/dashboardData.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_dashboardData_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_dashboardData_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/dashboardData\",\n        pathname: \"/api/dashboardData\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_dashboardData_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmRhc2hib2FyZERhdGEmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmRhc2hib2FyZERhdGEuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDeUQ7QUFDekQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHdEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx3REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oaWd1ZXJhYXp1cmVmdW5jdGlvbi8/NzZlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2Rhc2hib2FyZERhdGEuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kYXNoYm9hcmREYXRhXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZGFzaGJvYXJkRGF0YVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2FdashboardData&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2FdashboardData.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/cacheService.ts":
/*!*****************************!*\
  !*** ./lib/cacheService.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheService: () => (/* binding */ cacheService)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(api)/./lib/utils.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_utils__WEBPACK_IMPORTED_MODULE_0__);\n\n// Import only on the server side\nlet redisModule = null;\nlet trackExceptionFn = null;\n// Only import server-side modules when running on the server\nif (true) {\n    try {\n        redisModule = __webpack_require__(/*! redis */ \"redis\");\n        const { trackException } = __webpack_require__(/*! ./monitoringService */ \"(api)/./lib/monitoringService.ts\");\n        trackExceptionFn = trackException;\n    } catch (error) {\n        console.error(\"Error importing server-side modules:\", error);\n    }\n}\nclass RedisCache {\n    constructor(){\n        this.isConnected = false;\n        this.connectionTimeout = null;\n        this.MAX_RETRY_ATTEMPTS = 10;\n        this.INITIAL_RETRY_DELAY = 100 // ms\n        ;\n        this.MAX_RETRY_DELAY = 5000 // ms\n        ;\n        if ( true && redisModule) {\n            this.initializeRedis();\n        }\n    }\n    async initializeRedis() {\n        try {\n            const connectionString = process.env.REDIS_CONNECTION_STRING;\n            if (!connectionString) {\n                throw new Error(\"Redis connection string is not configured\");\n            }\n            this.client = redisModule.createClient({\n                url: connectionString,\n                socket: {\n                    tls: true,\n                    reconnectStrategy: (retries)=>{\n                        if (retries > this.MAX_RETRY_ATTEMPTS) {\n                            return new Error(\"Redis max retries reached\");\n                        }\n                        const delay = Math.min(this.INITIAL_RETRY_DELAY * Math.pow(1.5, retries), this.MAX_RETRY_DELAY);\n                        return delay;\n                    },\n                    connectTimeout: 15000\n                }\n            });\n            // Handle connection events\n            this.client.on(\"error\", (err)=>{\n                if (trackExceptionFn) {\n                    trackExceptionFn(err, {\n                        service: \"RedisCache\",\n                        event: \"connection-error\"\n                    });\n                }\n                this.isConnected = false;\n                this.scheduleReconnect();\n            });\n            this.client.on(\"connect\", ()=>{\n                this.isConnected = true;\n                if (this.connectionTimeout) {\n                    clearTimeout(this.connectionTimeout);\n                    this.connectionTimeout = null;\n                }\n            });\n            this.client.on(\"reconnecting\", ()=>{\n                if (trackExceptionFn) {\n                    trackExceptionFn(new Error(\"Redis reconnecting\"), {\n                        service: \"RedisCache\",\n                        event: \"reconnecting\"\n                    });\n                }\n            });\n            await this.client.connect();\n        } catch (error) {\n            if (trackExceptionFn) {\n                trackExceptionFn(error, {\n                    service: \"RedisCache\",\n                    operation: \"initializeRedis\"\n                });\n            }\n            this.isConnected = false;\n            this.scheduleReconnect();\n        }\n    }\n    scheduleReconnect() {\n        if (this.connectionTimeout) {\n            return; // Already scheduled\n        }\n        this.connectionTimeout = setTimeout(()=>{\n            this.connectionTimeout = null;\n            this.initializeRedis().catch((err)=>{\n                if (trackExceptionFn) {\n                    trackExceptionFn(err, {\n                        service: \"RedisCache\",\n                        operation: \"scheduleReconnect\"\n                    });\n                }\n            });\n        }, 5000); // Try to reconnect after 5 seconds\n    }\n    async get(key) {\n        if (false) {}\n        if (!this.isConnected) {\n            throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(\"Redis not connected\", 503);\n        }\n        try {\n            const value = await this.client.get(key);\n            return value ? JSON.parse(value) : null;\n        } catch (error) {\n            if (trackExceptionFn) {\n                trackExceptionFn(error, {\n                    service: \"RedisCache\",\n                    operation: \"get\",\n                    key\n                });\n            }\n            throw error;\n        }\n    }\n    async set(key, value, ttlSeconds = 300) {\n        if (false) {}\n        if (!this.isConnected) {\n            throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(\"Redis not connected\", 503);\n        }\n        try {\n            const serializedValue = JSON.stringify(value);\n            await this.client.set(key, serializedValue, {\n                EX: ttlSeconds\n            });\n        } catch (error) {\n            if (trackExceptionFn) {\n                trackExceptionFn(error, {\n                    service: \"RedisCache\",\n                    operation: \"set\",\n                    key\n                });\n            }\n            throw error;\n        }\n    }\n    async delete(key) {\n        if (false) {}\n        if (!this.isConnected) {\n            throw new _utils__WEBPACK_IMPORTED_MODULE_0__.AppError(\"Redis not connected\", 503);\n        }\n        try {\n            await this.client.del(key);\n        } catch (error) {\n            if (trackExceptionFn) {\n                trackExceptionFn(error, {\n                    service: \"RedisCache\",\n                    operation: \"delete\",\n                    key\n                });\n            }\n            throw error;\n        }\n    }\n}\nclass InMemoryCache {\n    async get(key) {\n        const item = this.cache.get(key);\n        if (!item) return null;\n        if (Date.now() > item.expiry) {\n            this.cache.delete(key);\n            return null;\n        }\n        return item.value;\n    }\n    async set(key, value, ttlSeconds = 300) {\n        const expiry = Date.now() + ttlSeconds * 1000;\n        this.cache.set(key, {\n            value,\n            expiry\n        });\n        // Cleanup expired items periodically\n        if (this.cache.size > 100) {\n            this.cleanup();\n        }\n    }\n    async delete(key) {\n        this.cache.delete(key);\n    }\n    cleanup() {\n        const now = Date.now();\n        for (const [key, item] of this.cache.entries()){\n            if (now > item.expiry) {\n                this.cache.delete(key);\n            }\n        }\n    }\n    constructor(){\n        this.cache = new Map();\n    }\n}\nclass CacheService {\n    constructor(){\n        this.fallbackCache = new InMemoryCache();\n        this.primaryCache = process.env.REDIS_CONNECTION_STRING ? new RedisCache() : this.fallbackCache;\n    }\n    static getInstance() {\n        if (!CacheService.instance) {\n            CacheService.instance = new CacheService();\n        }\n        return CacheService.instance;\n    }\n    async get(key) {\n        try {\n            return await this.primaryCache.get(key);\n        } catch (error) {\n            if (trackExceptionFn) {\n                trackExceptionFn(error, {\n                    service: \"CacheService\",\n                    operation: \"get\",\n                    key\n                });\n            }\n            return this.fallbackCache.get(key);\n        }\n    }\n    async set(key, value, ttlSeconds) {\n        try {\n            await this.primaryCache.set(key, value, ttlSeconds);\n        } catch (error) {\n            if (trackExceptionFn) {\n                trackExceptionFn(error, {\n                    service: \"CacheService\",\n                    operation: \"set\",\n                    key\n                });\n            }\n            await this.fallbackCache.set(key, value, ttlSeconds);\n        }\n    }\n    async delete(key) {\n        try {\n            await this.primaryCache.delete(key);\n        } catch (error) {\n            if (trackExceptionFn) {\n                trackExceptionFn(error, {\n                    service: \"CacheService\",\n                    operation: \"delete\",\n                    key\n                });\n            }\n            await this.fallbackCache.delete(key);\n        }\n    }\n}\n// Export singleton instance\nconst cacheService = CacheService.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/cacheService.ts\n");

/***/ }),

/***/ "(api)/./lib/monitoringService.ts":
/*!**********************************!*\
  !*** ./lib/monitoringService.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   queryLogs: () => (/* binding */ queryLogs),\n/* harmony export */   startOperation: () => (/* binding */ startOperation),\n/* harmony export */   stopOperation: () => (/* binding */ stopOperation),\n/* harmony export */   trackDependency: () => (/* binding */ trackDependency),\n/* harmony export */   trackEvent: () => (/* binding */ trackEvent),\n/* harmony export */   trackException: () => (/* binding */ trackException),\n/* harmony export */   trackMetric: () => (/* binding */ trackMetric),\n/* harmony export */   trackRequest: () => (/* binding */ trackRequest)\n/* harmony export */ });\n// Use dynamic imports for server-only modules\n// These modules will only be imported on the server\n// Import placeholders for server-side modules\nlet appInsightsModule = null;\nlet DefaultAzureCredentialClass = null;\nlet LogAnalyticsClientClass = null;\n// Only import server-side modules when running on the server\nif (true) {\n    try {\n        appInsightsModule = __webpack_require__(/*! applicationinsights */ \"applicationinsights\");\n        const { DefaultAzureCredential } = __webpack_require__(/*! @azure/identity */ \"@azure/identity\");\n        const { LogAnalyticsClient } = __webpack_require__(/*! @azure/monitor-query */ \"@azure/monitor-query\");\n        DefaultAzureCredentialClass = DefaultAzureCredential;\n        LogAnalyticsClientClass = LogAnalyticsClient;\n    } catch (error) {\n        console.error(\"Error importing server-side modules:\", error);\n    }\n}\nclass MonitoringService {\n    constructor(){\n        this.initialized = false;\n        if (true) {\n            this.initializeAppInsights();\n            this.initializeLogAnalytics();\n        }\n    }\n    static getInstance() {\n        if (!MonitoringService.instance) {\n            MonitoringService.instance = new MonitoringService();\n        }\n        return MonitoringService.instance;\n    }\n    initializeAppInsights() {\n        if (!this.initialized && process.env.APPLICATIONINSIGHTS_CONNECTION_STRING && appInsightsModule) {\n            appInsightsModule.setup(process.env.APPLICATIONINSIGHTS_CONNECTION_STRING).setAutoDependencyCorrelation(true).setAutoCollectRequests(true).setAutoCollectPerformance(true).setAutoCollectExceptions(true).setAutoCollectDependencies(true).setAutoCollectConsole(true).setUseDiskRetryCaching(true).setSendLiveMetrics(true).setDistributedTracingMode(appInsightsModule.DistributedTracingModes.AI_AND_W3C);\n            appInsightsModule.defaultClient.context.tags[appInsightsModule.defaultClient.context.keys.cloudRole] = \"HigueraFunction\";\n            appInsightsModule.start();\n            this.client = appInsightsModule.defaultClient;\n            this.initialized = true;\n        }\n    }\n    initializeLogAnalytics() {\n        if (DefaultAzureCredentialClass && LogAnalyticsClientClass) {\n            try {\n                const credential = new DefaultAzureCredentialClass();\n                this.logAnalyticsClient = new LogAnalyticsClientClass(credential);\n            } catch (error) {\n                console.error(\"Error initializing Log Analytics client:\", error);\n            }\n        }\n    }\n    trackException(error, properties) {\n        if ( false || !this.initialized) {\n            return; // Skip on client-side\n        }\n        try {\n            const enhancedProperties = {\n                ...properties,\n                errorName: error.name,\n                stackTrace: error.stack,\n                timestamp: new Date().toISOString()\n            };\n            this.client.trackException({\n                exception: error,\n                properties: enhancedProperties\n            });\n        } catch (error) {\n            console.error(\"Error tracking exception:\", error);\n        }\n    }\n    trackEvent(name, properties) {\n        if ( false || !this.initialized) {\n            return; // Skip on client-side\n        }\n        try {\n            const enhancedProperties = {\n                ...properties,\n                timestamp: new Date().toISOString(),\n                environment: process.env.AZURE_ENVIRONMENT || \"development\"\n            };\n            this.client.trackEvent({\n                name,\n                properties: enhancedProperties\n            });\n        } catch (error) {\n            console.error(\"Error tracking event:\", error);\n        }\n    }\n    trackMetric(name, value, properties) {\n        if ( false || !this.initialized) {\n            return; // Skip on client-side\n        }\n        try {\n            const enhancedProperties = {\n                ...properties,\n                timestamp: new Date().toISOString(),\n                environment: process.env.AZURE_ENVIRONMENT || \"development\"\n            };\n            this.client.trackMetric({\n                name,\n                value,\n                properties: enhancedProperties\n            });\n        } catch (error) {\n            console.error(\"Error tracking metric:\", error);\n        }\n    }\n    trackRequest(name, url, duration, success, properties) {\n        if ( false || !this.initialized) {\n            return; // Skip on client-side\n        }\n        try {\n            const enhancedProperties = {\n                ...properties,\n                timestamp: new Date().toISOString(),\n                environment: process.env.AZURE_ENVIRONMENT || \"development\"\n            };\n            this.client.trackRequest({\n                name,\n                url,\n                duration,\n                success,\n                properties: enhancedProperties\n            });\n        } catch (error) {\n            console.error(\"Error tracking request:\", error);\n        }\n    }\n    trackDependency(name, data, duration, success, properties) {\n        if ( false || !this.initialized) {\n            return; // Skip on client-side\n        }\n        try {\n            const enhancedProperties = {\n                ...properties,\n                timestamp: new Date().toISOString(),\n                environment: process.env.AZURE_ENVIRONMENT || \"development\"\n            };\n            this.client.trackDependency({\n                name,\n                data,\n                duration,\n                success,\n                properties: enhancedProperties,\n                dependencyTypeName: \"HTTP\"\n            });\n        } catch (error) {\n            console.error(\"Error tracking dependency:\", error);\n        }\n    }\n    async queryLogs(query, timeRange) {\n        if ( false || !this.logAnalyticsClient) {\n            return null; // Skip on client-side\n        }\n        try {\n            const workspaceId = process.env.LOG_ANALYTICS_WORKSPACE_ID;\n            if (!workspaceId) {\n                throw new Error(\"LOG_ANALYTICS_WORKSPACE_ID not configured\");\n            }\n            const result = await this.logAnalyticsClient.queryWorkspace(workspaceId, query, {\n                timeRange\n            });\n            return result;\n        } catch (error) {\n            if (this.initialized) {\n                this.trackException(error, {\n                    operation: \"queryLogs\"\n                });\n            }\n            throw error;\n        }\n    }\n    startOperation(name) {\n        if ( false || !this.initialized) {\n            return null; // Skip on client-side\n        }\n        try {\n            return this.client.startOperation({\n                name\n            });\n        } catch (error) {\n            console.error(\"Error starting operation:\", error);\n            return null;\n        }\n    }\n    stopOperation(operation) {\n        if ( false || !this.initialized || !operation) {\n            return; // Skip on client-side\n        }\n        try {\n            this.client.stopOperation(operation);\n        } catch (error) {\n            console.error(\"Error stopping operation:\", error);\n        }\n    }\n}\n// Export singleton instance methods\nconst monitoringService = MonitoringService.getInstance();\nconst trackException = (error, properties)=>monitoringService.trackException(error, properties);\nconst trackEvent = (name, properties)=>monitoringService.trackEvent(name, properties);\nconst trackMetric = (name, value, properties)=>monitoringService.trackMetric(name, value, properties);\nconst trackRequest = (name, url, duration, success, properties)=>monitoringService.trackRequest(name, url, duration, success, properties);\nconst trackDependency = (name, data, duration, success, properties)=>monitoringService.trackDependency(name, data, duration, success, properties);\nconst queryLogs = (query, timeRange)=>monitoringService.queryLogs(query, timeRange);\nconst startOperation = (name)=>monitoringService.startOperation(name);\nconst stopOperation = (operation)=>monitoringService.stopOperation(operation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/monitoringService.ts\n");

/***/ }),

/***/ "(api)/./lib/utils.js":
/*!**********************!*\
  !*** ./lib/utils.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Use conditional imports for server-side only modules\n\nlet DefaultAzureCredentialClass = null;\nlet trackExceptionFn = null;\n// Only import server-side modules when running on the server\nif (true) {\n    try {\n        const { DefaultAzureCredential } = __webpack_require__(/*! @azure/identity */ \"@azure/identity\");\n        const { trackException } = __webpack_require__(/*! ./monitoringService */ \"(api)/./lib/monitoringService.ts\");\n        DefaultAzureCredentialClass = DefaultAzureCredential;\n        trackExceptionFn = trackException;\n    } catch (error) {\n        console.error(\"Error importing server-side modules:\", error);\n    }\n}\n// Reusable error types\nclass AppError extends Error {\n    constructor(message, statusCode = 500){\n        super(message);\n        this.name = \"AppError\";\n        this.statusCode = statusCode;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n// Retry logic with exponential backoff\nasync function withRetry(operation, maxRetries = 3, baseDelay = 1000) {\n    let lastError;\n    for(let attempt = 0; attempt < maxRetries; attempt++){\n        try {\n            return await operation();\n        } catch (error) {\n            lastError = error;\n            if (!isRetryableError(error) || attempt === maxRetries - 1) {\n                throw error;\n            }\n            const delay = Math.min(baseDelay * Math.pow(2, attempt) + Math.random() * 1000, 10000);\n            if ( true && trackExceptionFn) {\n                trackExceptionFn(error, {\n                    operation: \"retry\",\n                    attempt: attempt.toString(),\n                    nextDelay: delay.toString()\n                });\n            }\n            await sleep(delay);\n        }\n    }\n    throw lastError;\n}\nfunction isRetryableError(error) {\n    const retryableCodes = [\n        408,\n        429,\n        500,\n        502,\n        503,\n        504\n    ];\n    const retryableMessages = [\n        \"ETIMEDOUT\",\n        \"ECONNRESET\",\n        \"ECONNREFUSED\",\n        \"EPIPE\",\n        \"EHOSTUNREACH\",\n        \"ENETUNREACH\",\n        \"ESOCKETTIMEDOUT\"\n    ];\n    return retryableCodes.includes(error.statusCode) || retryableMessages.includes(error.code) || error.message.toLowerCase().includes(\"timeout\") || error.message.toLowerCase().includes(\"network\") || error.message.toLowerCase().includes(\"temporarily unavailable\");\n}\nfunction sleep(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n// Enhanced error response formatter\nfunction formatErrorResponse(error) {\n    const response = {\n        error: {\n            message: error.message,\n            type: error.name,\n            statusCode: error.statusCode || 500\n        }\n    };\n    if (true) {\n        response.error.stack = error.stack;\n        response.error.details = error.details;\n    }\n    return response;\n}\n// Application Insights integration\nconst appInsightsEnabled =  true && !!process.env.APPLICATIONINSIGHTS_CONNECTION_STRING;\nfunction logError(error, context = {}) {\n    if ( true && trackExceptionFn) {\n        trackExceptionFn(error, {\n            ...context,\n            timestamp: new Date().toISOString(),\n            errorName: error.name,\n            errorMessage: error.message,\n            stackTrace: error.stack\n        });\n    }\n}\nfunction sanitizeInput(input) {\n    if (typeof input === \"string\") {\n        return input.replace(/[<>]/g, \"\").replace(/javascript:/gi, \"\").replace(/on\\w+=/gi, \"\").trim();\n    } else if (Array.isArray(input)) {\n        return input.map(sanitizeInput);\n    } else if (typeof input === \"object\" && input !== null) {\n        const sanitized = {};\n        for (const [key, value] of Object.entries(input)){\n            sanitized[key] = sanitizeInput(value);\n        }\n        return sanitized;\n    }\n    return input;\n}\nfunction validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return typeof email === \"string\" && emailRegex.test(email);\n}\nfunction formatDashboardData(data) {\n    try {\n        if (!data || typeof data !== \"object\") {\n            throw new AppError(\"Invalid dashboard data\", 400);\n        }\n        const kpiSection = formatKPISection(data.kpis);\n        const issuesSection = formatIssuesSection(data.issues);\n        const scheduleSection = formatScheduleSection(data.schedule);\n        return `${kpiSection}${issuesSection}${scheduleSection}`;\n    } catch (error) {\n        if ( true && trackExceptionFn) {\n            trackExceptionFn(error, {\n                operation: \"formatDashboardData\"\n            });\n        }\n        throw new AppError(\"Error formatting dashboard data\", 500);\n    }\n}\nfunction formatKPISection(kpis) {\n    if (!kpis || typeof kpis !== \"object\") {\n        throw new AppError(\"Invalid KPI data\", 400);\n    }\n    return `\nHIGUERA PROJECT - EXECUTIVE SUMMARY\n\nKEY METRICS:\n• Total Budget: ${formatCurrency(kpis.totalBudget)}\n• Spent: ${formatCurrency(kpis.spent)}\n• Remaining: ${formatCurrency(kpis.remaining)}\n• Overrun Risk: ${kpis.risk}\n`;\n}\nfunction formatIssuesSection(issues) {\n    if (!Array.isArray(issues)) {\n        throw new AppError(\"Invalid issues data\", 400);\n    }\n    const recentIssues = issues.slice(0, 5).map((issue)=>`\n• ${issue.date} - ${issue.system}\n  Issue: ${sanitizeInput(issue.issue)}\n  Impact: ${sanitizeInput(issue.impact)}\n  Accountability: ${sanitizeInput(issue.accountability)}`).join(\"\\n\");\n    return `\nRECENT ISSUES:${recentIssues}`;\n}\nfunction formatScheduleSection(schedule) {\n    if (!Array.isArray(schedule)) {\n        throw new AppError(\"Invalid schedule data\", 400);\n    }\n    const scheduleItems = schedule.map((item)=>`• ${sanitizeInput(item.task)}: Plan ${item.Planned}% vs Actual ${item.Actual}%`).join(\"\\n\");\n    return `\nSCHEDULE STATUS:\n${scheduleItems}\n\nFor detailed charts and visualizations, please visit the project dashboard.\n`;\n}\nfunction formatCurrency(number) {\n    if (typeof number !== \"number\" || isNaN(number)) {\n        throw new AppError(\"Invalid currency value\", 400);\n    }\n    return new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n    }).format(number);\n}\nmodule.exports = {\n    AppError,\n    withRetry,\n    sleep,\n    sanitizeInput,\n    validateEmail,\n    formatDashboardData,\n    formatCurrency,\n    formatErrorResponse,\n    logError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/utils.js\n");

/***/ }),

/***/ "(api)/./pages/api/dashboardData.js":
/*!************************************!*\
  !*** ./pages/api/dashboardData.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_cacheService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/cacheService */ \"(api)/./lib/cacheService.ts\");\n\n// Mock data for development\nconst mockProjectData = {\n    totalBudget: 150000,\n    budgetUsed: 65000,\n    tasksCompleted: 24,\n    totalTasks: 42,\n    projectProgress: 57,\n    nextMilestone: \"2025-05-15\",\n    recentUpdates: [\n        {\n            date: \"2025-04-15\",\n            description: \"Phase 1 completed\"\n        },\n        {\n            date: \"2025-04-10\",\n            description: \"Infrastructure deployment\"\n        },\n        {\n            date: \"2025-04-05\",\n            description: \"Design approval\"\n        }\n    ],\n    taskDistribution: {\n        \"Not Started\": 10,\n        \"In Progress\": 8,\n        \"Completed\": 24\n    },\n    resourceAllocation: {\n        development: 65,\n        testing: 40,\n        deployment: 25\n    },\n    monthlyHours: [\n        {\n            month: \"Jan\",\n            hours: 120\n        },\n        {\n            month: \"Feb\",\n            hours: 150\n        },\n        {\n            month: \"Mar\",\n            hours: 180\n        },\n        {\n            month: \"Apr\",\n            hours: 210\n        }\n    ]\n};\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const cacheKey = \"dashboardData\";\n        // Try to get cached data first using cacheService.get\n        const cachedData = await _lib_cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.get(cacheKey);\n        if (cachedData) {\n            // Assuming cachedData is already an object, no need to parse\n            return res.status(200).json(cachedData);\n        }\n        // Simplify: Always use mock data for now, remove config/monitoring calls\n        const dashboardData = mockProjectData;\n        // Cache the data for 5 minutes using cacheService.set\n        // Ensure the value is stringified if cacheService expects a string\n        await _lib_cacheService__WEBPACK_IMPORTED_MODULE_0__.cacheService.set(cacheKey, dashboardData, 5 * 60);\n        return res.status(200).json(dashboardData);\n    } catch (error) {\n        console.error(\"Dashboard API error:\", error);\n        return res.status(500).json({\n            message: \"Failed to retrieve dashboard data\",\n            // Use error.message directly if available\n            error:  true && error instanceof Error ? error.message : undefined\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZGFzaGJvYXJkRGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUV0RCw0QkFBNEI7QUFDNUIsTUFBTUMsa0JBQWtCO0lBQ3RCQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsZ0JBQWdCO0lBQ2hCQyxZQUFZO0lBQ1pDLGlCQUFpQjtJQUNqQkMsZUFBZTtJQUNmQyxlQUFlO1FBQ2I7WUFBRUMsTUFBTTtZQUFjQyxhQUFhO1FBQW9CO1FBQ3ZEO1lBQUVELE1BQU07WUFBY0MsYUFBYTtRQUE0QjtRQUMvRDtZQUFFRCxNQUFNO1lBQWNDLGFBQWE7UUFBa0I7S0FDdEQ7SUFDREMsa0JBQWtCO1FBQ2hCLGVBQWU7UUFDZixlQUFlO1FBQ2YsYUFBYTtJQUNmO0lBQ0FDLG9CQUFvQjtRQUNsQkMsYUFBYTtRQUNiQyxTQUFTO1FBQ1RDLFlBQVk7SUFDZDtJQUNBQyxjQUFjO1FBQ1o7WUFBRUMsT0FBTztZQUFPQyxPQUFPO1FBQUk7UUFDM0I7WUFBRUQsT0FBTztZQUFPQyxPQUFPO1FBQUk7UUFDM0I7WUFBRUQsT0FBTztZQUFPQyxPQUFPO1FBQUk7UUFDM0I7WUFBRUQsT0FBTztZQUFPQyxPQUFPO1FBQUk7S0FDNUI7QUFDSDtBQUVlLGVBQWVDLFFBQVFDLEdBQUcsRUFBRUMsR0FBRztJQUM1QyxJQUFJRCxJQUFJRSxNQUFNLEtBQUssT0FBTztRQUN4QixPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7UUFBcUI7SUFDOUQ7SUFFQSxJQUFJO1FBQ0YsTUFBTUMsV0FBVztRQUNqQixzREFBc0Q7UUFDdEQsTUFBTUMsYUFBYSxNQUFNM0IsMkRBQVlBLENBQUM0QixHQUFHLENBQUNGO1FBQzFDLElBQUlDLFlBQVk7WUFDZCw2REFBNkQ7WUFDN0QsT0FBT04sSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ0c7UUFDOUI7UUFFQSx5RUFBeUU7UUFDekUsTUFBTUUsZ0JBQWdCNUI7UUFFdEIsc0RBQXNEO1FBQ3RELG1FQUFtRTtRQUNuRSxNQUFNRCwyREFBWUEsQ0FBQzhCLEdBQUcsQ0FBQ0osVUFBVUcsZUFBZSxJQUFJO1FBRXBELE9BQU9SLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUNLO0lBQzlCLEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsd0JBQXdCQTtRQUN0QyxPQUFPVixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQzFCQyxTQUFTO1lBQ1QsMENBQTBDO1lBQzFDTSxPQUFPRSxLQUF5QixJQUFpQkYsaUJBQWlCRyxRQUFRSCxNQUFNTixPQUFPLEdBQUdVO1FBQzVGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2hpZ3VlcmFhenVyZWZ1bmN0aW9uLy4vcGFnZXMvYXBpL2Rhc2hib2FyZERhdGEuanM/ZGUwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWNoZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9saWIvY2FjaGVTZXJ2aWNlJztcblxuLy8gTW9jayBkYXRhIGZvciBkZXZlbG9wbWVudFxuY29uc3QgbW9ja1Byb2plY3REYXRhID0ge1xuICB0b3RhbEJ1ZGdldDogMTUwMDAwLFxuICBidWRnZXRVc2VkOiA2NTAwMCxcbiAgdGFza3NDb21wbGV0ZWQ6IDI0LFxuICB0b3RhbFRhc2tzOiA0MixcbiAgcHJvamVjdFByb2dyZXNzOiA1NyxcbiAgbmV4dE1pbGVzdG9uZTogJzIwMjUtMDUtMTUnLFxuICByZWNlbnRVcGRhdGVzOiBbXG4gICAgeyBkYXRlOiAnMjAyNS0wNC0xNScsIGRlc2NyaXB0aW9uOiAnUGhhc2UgMSBjb21wbGV0ZWQnIH0sXG4gICAgeyBkYXRlOiAnMjAyNS0wNC0xMCcsIGRlc2NyaXB0aW9uOiAnSW5mcmFzdHJ1Y3R1cmUgZGVwbG95bWVudCcgfSxcbiAgICB7IGRhdGU6ICcyMDI1LTA0LTA1JywgZGVzY3JpcHRpb246ICdEZXNpZ24gYXBwcm92YWwnIH1cbiAgXSxcbiAgdGFza0Rpc3RyaWJ1dGlvbjoge1xuICAgICdOb3QgU3RhcnRlZCc6IDEwLFxuICAgICdJbiBQcm9ncmVzcyc6IDgsXG4gICAgJ0NvbXBsZXRlZCc6IDI0XG4gIH0sXG4gIHJlc291cmNlQWxsb2NhdGlvbjoge1xuICAgIGRldmVsb3BtZW50OiA2NSxcbiAgICB0ZXN0aW5nOiA0MCxcbiAgICBkZXBsb3ltZW50OiAyNVxuICB9LFxuICBtb250aGx5SG91cnM6IFtcbiAgICB7IG1vbnRoOiAnSmFuJywgaG91cnM6IDEyMCB9LFxuICAgIHsgbW9udGg6ICdGZWInLCBob3VyczogMTUwIH0sXG4gICAgeyBtb250aDogJ01hcicsIGhvdXJzOiAxODAgfSxcbiAgICB7IG1vbnRoOiAnQXByJywgaG91cnM6IDIxMCB9XG4gIF1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdHRVQnKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gJ2Rhc2hib2FyZERhdGEnO1xuICAgIC8vIFRyeSB0byBnZXQgY2FjaGVkIGRhdGEgZmlyc3QgdXNpbmcgY2FjaGVTZXJ2aWNlLmdldFxuICAgIGNvbnN0IGNhY2hlZERhdGEgPSBhd2FpdCBjYWNoZVNlcnZpY2UuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoY2FjaGVkRGF0YSkge1xuICAgICAgLy8gQXNzdW1pbmcgY2FjaGVkRGF0YSBpcyBhbHJlYWR5IGFuIG9iamVjdCwgbm8gbmVlZCB0byBwYXJzZVxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKGNhY2hlZERhdGEpO1xuICAgIH1cblxuICAgIC8vIFNpbXBsaWZ5OiBBbHdheXMgdXNlIG1vY2sgZGF0YSBmb3Igbm93LCByZW1vdmUgY29uZmlnL21vbml0b3JpbmcgY2FsbHNcbiAgICBjb25zdCBkYXNoYm9hcmREYXRhID0gbW9ja1Byb2plY3REYXRhO1xuXG4gICAgLy8gQ2FjaGUgdGhlIGRhdGEgZm9yIDUgbWludXRlcyB1c2luZyBjYWNoZVNlcnZpY2Uuc2V0XG4gICAgLy8gRW5zdXJlIHRoZSB2YWx1ZSBpcyBzdHJpbmdpZmllZCBpZiBjYWNoZVNlcnZpY2UgZXhwZWN0cyBhIHN0cmluZ1xuICAgIGF3YWl0IGNhY2hlU2VydmljZS5zZXQoY2FjaGVLZXksIGRhc2hib2FyZERhdGEsIDUgKiA2MCk7XG5cbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oZGFzaGJvYXJkRGF0YSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRGFzaGJvYXJkIEFQSSBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXG4gICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHJldHJpZXZlIGRhc2hib2FyZCBkYXRhJyxcbiAgICAgIC8vIFVzZSBlcnJvci5tZXNzYWdlIGRpcmVjdGx5IGlmIGF2YWlsYWJsZVxuICAgICAgZXJyb3I6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cbn0iXSwibmFtZXMiOlsiY2FjaGVTZXJ2aWNlIiwibW9ja1Byb2plY3REYXRhIiwidG90YWxCdWRnZXQiLCJidWRnZXRVc2VkIiwidGFza3NDb21wbGV0ZWQiLCJ0b3RhbFRhc2tzIiwicHJvamVjdFByb2dyZXNzIiwibmV4dE1pbGVzdG9uZSIsInJlY2VudFVwZGF0ZXMiLCJkYXRlIiwiZGVzY3JpcHRpb24iLCJ0YXNrRGlzdHJpYnV0aW9uIiwicmVzb3VyY2VBbGxvY2F0aW9uIiwiZGV2ZWxvcG1lbnQiLCJ0ZXN0aW5nIiwiZGVwbG95bWVudCIsIm1vbnRobHlIb3VycyIsIm1vbnRoIiwiaG91cnMiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJjYWNoZUtleSIsImNhY2hlZERhdGEiLCJnZXQiLCJkYXNoYm9hcmREYXRhIiwic2V0IiwiZXJyb3IiLCJjb25zb2xlIiwicHJvY2VzcyIsIkVycm9yIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/dashboardData.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2FdashboardData&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2FdashboardData.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();